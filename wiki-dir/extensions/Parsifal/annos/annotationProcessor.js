





const processAnnotations = async (promisedAnnos, page, svport, annotationLayer, pdfDoc, controller, renderer)  => {
var annos = await promisedAnnos;                  // go from promise to value
for (let i = 0; i < annos.length; i++) { 
 switch (annos[i].subtype) {
   case "Widget":  doWidgetAnnotation (annos[i], page, svport, annotationLayer); break;
   case "Text":    doTextAnnotation   (annos[i], page, svport, annotationLayer); break;
   case "Link":    if (annos[i].url  || annos[i].unsafeUrl)    {doLinkAnnotation   (annos[i], page, svport, annotationLayer, renderer);} 
                   if (annos[i].action)                        {doActionAnnotation (annos[i], page, svport, annotationLayer, renderer);}
                   break;
   case "Square":  doSquareAnnotation (annos[i], page, svport, annotationLayer); break;  // used forlocal hit areas     generated by pdfsquarecomment command in latex
   case "Hover":   doHoverAnnotation (annos[i], page, svport, annotationLayer);  break;   // used for local hit areas not shown in PDF
   case "MyJson":  doMyJsonAnnotation (annos[i], page, svport, annotationLayer); break;
   
   case "Html":    doHTMLAnnotation(annos[i], page, svport, annotationLayer); break;  // currently just a test
   
   case "BtnMenu":    doBtnMenuAnnotation (annos[i], page, svport, annotationLayer); break;
 }
} // end for
return Promise.resolve ();   // TODO: in the caller we should have a mechanism probably, waiting for this
};
